# ./nginx/nginx.conf

# Define el usuario con el que Nginx correrá sus procesos worker.
# 'nginx' es común; para Docker, a veces 'www-data' o se omite si la imagen base lo maneja.
# user nginx; # Puedes descomentar y ajustar si es necesario, pero a menudo no se requiere en Docker.

# Número de procesos worker; 'auto' intentará detectarlo basado en los cores de la CPU.
worker_processes auto;

# Ruta al archivo PID del proceso master de Nginx.
pid /var/run/nginx.pid;

# Inclusión de módulos dinámicos si los usas (generalmente no es necesario para configuraciones básicas).
# include /etc/nginx/modules-enabled/*.conf;

events {
    # Número máximo de conexiones simultáneas que un proceso worker puede manejar.
    worker_connections 1024;
    # multi_accept on; # Permite a un worker aceptar todas las conexiones nuevas a la vez.
}

http {
    # ---- Configuración HTTP Global ----

    # Tipos MIME
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Formato de log
    # El formato 'main' es común, pero puedes definir uno personalizado.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Dónde guardar los logs de acceso y error (estos son logs globales, los 'server' pueden tener los suyos)
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn; # Puedes cambiar 'warn' a 'debug' para más detalle si es necesario

    # Habilitar sendfile para una entrega de archivos estáticos más eficiente.
    sendfile on;

    # tcp_nopush on; # Optimiza el envío de paquetes (a menudo junto con sendfile).
    # tcp_nodelay on; # Reduce latencia para ciertas conexiones.

    # Keep-alive timeout.
    keepalive_timeout 65;

    # Compresión Gzip (reduce el tamaño de las respuestas HTTP).
    gzip on;
    gzip_disable "msie6"; # Deshabilita para navegadores antiguos problemáticos.
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # ---- Servidor DNS interno de Docker para resolución de nombres de servicio ----
    # Necesario para que Nginx pueda resolver 'frontend' y 'backend' a sus IPs internas de contenedor.
    resolver 127.0.0.11 valid=30s; # 127.0.0.11 es el DNS interno de Docker.

    # ---- Servidores Virtuales (Bloques 'server') ----

    server {
        listen 80 default_server; # Escucha en el puerto 80, default_server si tienes múltiples 'server_name' o IPs.
        listen [::]:80 default_server; # Para IPv6

        server_name localhost; # O tu dominio si lo tienes.

        # Logs específicos para este servidor virtual (opcional si los globales son suficientes)
        # access_log /var/log/nginx/mi_app_access.log main;
        # error_log /var/log/nginx/mi_app_error.log warn;

        # ---- Ubicación para el Frontend (Streamlit) ----
        location / {
            # proxy_pass al servicio 'frontend' y su puerto interno.
            proxy_pass http://frontend:8501;

            # Cabeceras importantes para el proxy reverso.
            proxy_set_header Host $host; # Pasa el Host original solicitado por el cliente.
            proxy_set_header X-Real-IP $remote_addr; # Pasa la IP real del cliente.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Lista de IPs por las que pasó la petición.
            proxy_set_header X-Forwarded-Proto $scheme; # Pasa el esquema original (http o https).

            # Necesario para WebSockets (Streamlit los usa extensivamente).
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Timeouts para el proxy (ajusta según sea necesario).
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s; # Puede necesitar ser más largo para operaciones de Streamlit que toman tiempo.
        }

        # ---- Ubicación para el Backend (FastAPI) bajo /api/ ----
        location /api/ {
            # proxy_pass al servicio 'backend' y su puerto interno.
            # Importante: Si FastAPI está configurado con root_path="/api",
            # Nginx debe pasar el path completo (incluyendo /api/) al backend.
            # Por lo tanto, NO pongas una barra al final de la URL de proxy_pass aquí.
            proxy_pass http://backend:5000; # Pasa /api/... a backend:5000/api/...

            # Cabeceras importantes para el proxy reverso.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts para el proxy (ajusta según sea necesario).
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s; # Operaciones de API, especialmente con LLMs, pueden tardar.
        }

        # ---- Manejo de Errores Personalizado (Opcional) ----
        # Puedes definir páginas de error personalizadas.
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #    root /usr/share/nginx/html; # O donde tengas tus páginas de error.
        # }

        # ---- Medidas de Seguridad Básicas (Opcional, pero recomendado) ----
        # Ocultar la versión de Nginx.
        server_tokens off;

        # Protección contra Clickjacking.
        # add_header X-Frame-Options "SAMEORIGIN" always;

        # Protección contra XSS.
        # add_header X-XSS-Protection "1; mode=block" always;

        # Protección contra MIME-sniffing.
        # add_header X-Content-Type-Options "nosniff" always;

        # Referrer Policy
        # add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Content Security Policy (CSP) - ¡Configurar esto requiere cuidado!
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; ..." always;
    }

    # ---- Otro Servidor Virtual (Ejemplo para HTTPS, si lo configuras) ----
    # server {
    #    listen 443 ssl http2;
    #    listen [::]:443 ssl http2;
    #    server_name tu.dominio.com;
    #
    #    ssl_certificate /etc/letsencrypt/live/tu.dominio.com/fullchain.pem;
    #    ssl_certificate_key /etc/letsencrypt/live/tu.dominio.com/privkey.pem;
    #    include /etc/letsencrypt/options-ssl-nginx.conf; # Opciones de SSL de Let's Encrypt
    #    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # Parámetros DH
    #
    #    # Mismas locations que arriba, pero ahora para HTTPS.
    #    location / {
    #        proxy_pass http://frontend:8501;
    #        # ... mismas cabeceras proxy_set_header ...
    #    }
    #
    #    location /api/ {
    #        proxy_pass http://backend:5000;
    #        # ... mismas cabeceras proxy_set_header ...
    #    }
    # }

    # ---- Inclusión de configuraciones adicionales (si las tienes) ----
    # include /etc/nginx/conf.d/*.conf;
    # include /etc/nginx/sites-enabled/*; # Común en instalaciones no Docker.
}
