services:
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
    networks:
      - chatbot_network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # Frontend - Interfaz de usuario del chatbot
  frontend:
    # build: ./frontend
    image: frontend:latest
    container_name: frontend
    ports:
      - "8501:8501"
    networks:
      - chatbot_network
    volumes:
      - ./frontend:/app
    restart: unless-stopped

  # Backend - Generador de embeddings con Nomic Server
  backend:
    # build: ./backend
    container_name: backend
    image: backend:latest
    ports:
      - "5000:5000"
    networks:
      - chatbot_network
    volumes:
      - ./backend:/app
    depends_on:
      - milvus
      # - nomic
      - postgres
    environment:
      - PYTHONPATH=/app
    restart: unless-stopped

  # n8n - Orquestador de flujos
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    ports:
      - "5678:5678"
    networks:
      - chatbot_network
    environment:
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - DB_TYPE=${DB_TYPE}
      - DB_POSTGRESDB_HOST=${DB_POSTGRESDB_HOST}
      - DB_POSTGRESDB_PORT=${DB_POSTGRESDB_PORT}
      - DB_POSTGRESDB_DATABASE=${DB_POSTGRESDB_DATABASE}
      - DB_POSTGRESDB_USER=${DB_POSTGRESDB_USER}
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
    depends_on:
      - postgres
    volumes:
      - n8n_data:/root/.n8n
    restart: unless-stopped

  # PostgreSQL - Base de datos para n8n (y posiblemente otros servicios)
  postgres:
    image: postgres:17
    container_name: postgres_chatbot
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - chatbot_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Ollama - Modelo de lenguaje avanzado
  ollama_llm:
    image: ollama/ollama
    container_name: ollama_llm
    networks:
      - chatbot_network
    ports:
      - "11434:11434" # Puerto dedicado para el modelo LLM
    volumes:
      - ~/.ollama:/root/.ollama # Almacenamiento dedicado para el modelo LLM
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST}
      - OLLAMA_MODELS=${OLLAMA_MODELS}
      - OLLAMA_MAX_CONCURRENT_QUERIES=${OLLAMA_MAX_CONCURRENT_QUERIES}
    restart: unless-stopped

  # Servicio Ollama Embedding (Modelo nomic-embed-text)
  # ollama_embed:
  #   image: ollama/ollama
  #   container_name: ollama_embed
  #   networks:
  #     - chatbot_network
  #   ports:
  #     - "11435:11435"  # Puerto dedicado para el modelo de embeddings
  #   volumes:
  #     - ~/.ollama:/root/.ollama  # Almacenamiento dedicado para el modelo de embeddings
  #   environment:
  #     - OLLAMA_HOST=http://0.0.0.0:11435
  #     - OLLAMA_MODELS=/root/.ollama/models
  #   restart: unless-stopped
  # Milvus - Base de datos vectorial

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    networks:
      - chatbot_network
    environment:
      - ETCD_AUTO_COMPACTION_MODE=${ETCD_AUTO_COMPACTION_MODE}
      - ETCD_AUTO_COMPACTION_RETENTION=${ETCD_AUTO_COMPACTION_RETENTION}
      - ETCD_QUOTA_BACKEND_BYTES=${ETCD_QUOTA_BACKEND_BYTES}
      - ETCD_SNAPSHOT_COUNT=${ETCD_SNAPSHOT_COUNT}
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "echo 'Testing etcd health'; etcdctl --endpoints=http://milvus-etcd:2379 endpoint health",
        ]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s
    command: etcd -advertise-client-urls=http://milvus-etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    networks:
      - chatbot_network
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 10s
      retries: 6

  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.3
    command: ["milvus", "run", "standalone"]
    networks:
      - chatbot_network
    environment:
      ETCD_ENDPOINTS: ${ETCD_ENDPOINTS}
      MINIO_ADDRESS: ${MINIO_ADDRESS}
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
      # - "minio"
      # - "etcd"
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

    # Nomic Embed Server
  # nomic:
  #   build: ./nomic  # Crea el servicio desde la carpeta "nomic"
  #   container_name: nomic
  #   ports:
  #     - "8000:8000"  # Cambia el puerto si es necesario
  #   networks:
  #     - chatbot_network
  #   volumes:
  #     - ./nomic:/app  # Sincroniza la carpeta local con el contenedor
  #     - nomic_cache:/root/.cache
  #   environment:
  #     - MODE=local  # Ejecutar en modo local
  #   restart:  unless-stopped

networks:
  chatbot_network:
    driver: bridge

volumes:
  backend:
    driver: local
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  ollama_data:
    driver: local
  milvus_data:
    driver: local
  minio_data:
    driver: local
  nginx_data:
    driver: local
  # nomic_cache:
  #   driver: local
